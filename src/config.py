# -*- coding: utf-8 -*-
"""
配置文件

统一管理项目的所有参数设置。
"""

import os

# --- 1. 文件路径 ---
# 获取项目根目录
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 原始数据存放路径 (需要根据实际情况修改)
PATH_RAW_DATA = os.path.join(PROJECT_ROOT, 'data', 'raw')
# 处理后数据保存路径
PATH_PROCESSED_DATA = os.path.join(PROJECT_ROOT, 'data', 'processed')
# 结果输出路径 (表格、图片等)
PATH_OUTPUT = os.path.join(PROJECT_ROOT, 'output')
PATH_OUTPUT_TABLES = os.path.join(PATH_OUTPUT, 'tables')
PATH_OUTPUT_FIGURES = os.path.join(PATH_OUTPUT, 'figures')
PATH_OUTPUT_ROBUSTNESS = os.path.join(PATH_OUTPUT_TABLES, 'robustness')

# 确保输出目录存在
os.makedirs(PATH_PROCESSED_DATA, exist_ok=True)
os.makedirs(PATH_OUTPUT_TABLES, exist_ok=True)
os.makedirs(PATH_OUTPUT_FIGURES, exist_ok=True)
os.makedirs(PATH_OUTPUT_ROBUSTNESS, exist_ok=True)

# 处理后的面板数据文件名
PANEL_DATA_FILENAME = "panel_data_features.parquet"
PANEL_DATA_FILEPATH = os.path.join(PATH_PROCESSED_DATA, PANEL_DATA_FILENAME)

# --- 2. 分析时间范围 ---
ANALYSIS_START_DATE = "2010-01-01"
ANALYSIS_END_DATE = "2024-12-31" 

# --- 3. 节假日定义 (用于 DID) ---
# 定义主要节假日及其窗口期 (T-5 到 T+10)
HOLIDAY_SPECIFIC_DATES = {
    "元旦": {
        2010: ("2010-01-01", "2010-01-03"), 2011: ("2011-01-01", "2011-01-03"), 2012: ("2012-01-01", "2012-01-03"),
        2013: ("2013-01-01", "2013-01-03"), 2014: ("2014-01-01", "2014-01-01"), 2015: ("2015-01-01", "2015-01-03"),
        2016: ("2016-01-01", "2016-01-03"), 2017: ("2017-01-01", "2017-01-02"), 2018: ("2018-01-01", "2018-01-01"), # 2018年元旦实际放假是12月30日到1月1日，但按惯例写官方日期
        2019: ("2019-01-01", "2019-01-01"), 
        2020: ("2020-01-01", "2020-01-01"), 2021: ("2021-01-01", "2021-01-03"), 2022: ("2022-01-01", "2022-01-03"),
        2023: ("2023-01-01", "2023-01-02"), 
        2024: ("2024-01-01", "2024-01-01")  
    },
    "春节": {
        2010: ("2010-02-13", "2010-02-19"), 2011: ("2011-02-02", "2011-02-08"), 2012: ("2012-01-22", "2012-01-28"),
        2013: ("2013-02-09", "2013-02-15"), 2014: ("2014-01-31", "2014-02-06"), 2015: ("2015-02-18", "2015-02-24"),
        2016: ("2016-02-07", "2016-02-13"), 2017: ("2017-01-27", "2017-02-02"), 2018: ("2018-02-15", "2018-02-21"),
        2019: ("2019-02-04", "2019-02-10"), 2020: ("2020-01-24", "2020-01-30"), # 注意：2020年春节后因疫情有延长，这里按原定计划
        2021: ("2021-02-11", "2021-02-17"), 2022: ("2022-01-31", "2022-02-06"), 2023: ("2023-01-21", "2023-01-27"),
        2024: ("2024-02-10", "2024-02-17")
    },
    "清明节": {
        2010: ("2010-04-03", "2010-04-05"), 2011: ("2011-04-03", "2011-04-05"), 2012: ("2012-04-02", "2012-04-04"),
        2013: ("2013-04-04", "2013-04-06"), 2014: ("2014-04-05", "2014-04-07"), 2015: ("2015-04-04", "2015-04-06"),
        2016: ("2016-04-02", "2016-04-04"), 2017: ("2017-04-02", "2017-04-04"), 2018: ("2018-04-05", "2018-04-07"),
        2019: ("2019-04-05", "2019-04-07"), 2020: ("2020-04-04", "2020-04-06"), 2021: ("2021-04-03", "2021-04-05"),
        2022: ("2022-04-03", "2022-04-05"), 2023: ("2023-04-05", "2023-04-05"), 2024: ("2024-04-04", "2024-04-06")
    },
    "劳动节": {
        2010: ("2010-05-01", "2010-05-03"), 2011: ("2011-04-30", "2011-05-02"), 2012: ("2012-04-29", "2012-05-01"),
        2013: ("2013-04-29", "2013-05-01"), 2014: ("2014-05-01", "2014-05-03"), 2015: ("2015-05-01", "2015-05-03"),
        2016: ("2016-04-30", "2016-05-02"), 2017: ("2017-04-29", "2017-05-01"), 2018: ("2018-04-29", "2018-05-01"), # 2018年劳动节实际只放4.29-5.1
        2019: ("2019-05-01", "2019-05-04"), 2020: ("2020-05-01", "2020-05-05"), 2021: ("2021-05-01", "2021-05-05"),
        2022: ("2022-04-30", "2022-05-04"), 2023: ("2023-04-29", "2023-05-03"), 2024: ("2024-05-01", "2024-05-05")
    },
    "端午节": {
        2010: ("2010-06-14", "2010-06-16"), 2011: ("2011-06-04", "2011-06-06"), 2012: ("2012-06-22", "2012-06-24"),
        2013: ("2013-06-10", "2013-06-12"), 2014: ("2014-05-31", "2014-06-02"), 2015: ("2015-06-20", "2015-06-22"),
        2016: ("2016-06-09", "2016-06-11"), 2017: ("2017-05-28", "2017-05-30"), 2018: ("2018-06-16", "2018-06-18"),
        2019: ("2019-06-07", "2019-06-09"), 2020: ("2020-06-25", "2020-06-27"), 2021: ("2021-06-12", "2021-06-14"),
        2022: ("2022-06-03", "2022-06-05"), 2023: ("2023-06-22", "2023-06-24"), 2024: ("2024-06-08", "2024-06-10")
    },
    "中秋节": {
        2010: ("2010-09-22", "2010-09-24"), 2011: ("2011-09-10", "2011-09-12"), 2012: ("2012-09-30", "2012-09-30"), # 2012中秋在国庆假期内
        2013: ("2013-09-19", "2013-09-21"), 2014: ("2014-09-06", "2014-09-08"), 2015: ("2015-09-27", "2015-09-27"), # 2015中秋为周日，补休在周一28号
        2016: ("2016-09-15", "2016-09-17"), 2017: ("2017-10-04", "2017-10-04"), # 2017中秋在国庆假期内
        2018: ("2018-09-22", "2018-09-24"), 2019: ("2019-09-13", "2019-09-15"),
        2020: ("2020-10-01", "2020-10-08"), # 2020中秋国庆合并
        2021: ("2021-09-19", "2021-09-21"), 2022: ("2022-09-10", "2022-09-12"),
        2023: ("2023-09-29", "2023-10-06"), # 2023中秋国庆合并
        2024: ("2024-09-15", "2024-09-17")
    },
    "国庆节": {
        2010: ("2010-10-01", "2010-10-07"), 2011: ("2011-10-01", "2011-10-07"), 2012: ("2012-10-01", "2012-10-07"),
        2013: ("2013-10-01", "2013-10-07"), 2014: ("2014-10-01", "2014-10-07"), 2015: ("2015-10-01", "2015-10-07"),
        2016: ("2016-10-01", "2016-10-07"), 2017: ("2017-10-01", "2017-10-08"), # 含中秋
        2018: ("2018-10-01", "2018-10-07"), 2019: ("2019-10-01", "2019-10-07"),
        2020: ("2020-10-01", "2020-10-08"), # 含中秋
        2021: ("2021-10-01", "2021-10-07"), 2022: ("2022-10-01", "2022-10-07"),
        2023: ("2023-09-29", "2023-10-06"), # 含中秋，从9月29日开始
        2024: ("2024-10-01", "2024-10-07")
    }
}

# DID 分析中围绕节假日定义的窗口期 (交易日)
DID_HOLIDAY_WINDOW_PRE = 5  # 节假日前 T-5
DID_HOLIDAY_WINDOW_POST = 10 # 节假日后 T+10 (包含节假日本身的天数也应考虑在内，具体在 build_features 实现)

# --- 4. 特征工程参数 ---
# 计算状态变量的回看期 (交易日天数)
MARKET_REGIME_LOOKBACK = 60 # 过去60天移动平均收益率
VOLATILITY_REGIME_LOOKBACK = 120 # 过去120天滚动中位数

# --- 5. 模型参数 ---
# 5.1 DID (Callaway & Sant'Anna)
DID_EVENT_WINDOW_PRE = 10  # 事件前窗口期 (t=-10)
DID_EVENT_WINDOW_POST = 20 # 事件后窗口期 (t=+20)
DID_CLUSTER_VAR = "contract_id" # DID 聚类稳健标准误的变量 (根据 C&S 包要求调整)

# 5.2 LP-IRF (局部投影)
LP_HORIZON = 20 # 脉冲响应期数 H (0 到 20)
LP_CONTROL_LAGS = 1 # 控制变量滞后阶数 (通常为 t-1)
LP_CLUSTER_VARS = ["contract_id", "date"] # LP 双向聚类稳健标准误的变量

# --- 6. 状态变量定义 ---
VOLATILITY_REGIME_QUANTILE = 0.5 # 定义高/低波动率状态的分位数 (0.5 代表中位数)
# 市场状态阈值
# > 0.001 为牛市, < -0.001 为熊市, 之间为震荡市
MARKET_REGIME_UPPER_THRESHOLD = 0.0005 
MARKET_REGIME_LOWER_THRESHOLD = -0.0005 

# --- 7. 控制变量列表 ---
# 在 build_features.py 中创建的变量名 (滞后项)
CONTROL_VARIABLES = [
    "log_gk_volatility_lag1",
    "log_volume_lag1",
    "log_open_interest_lag1",
    "return_lag1",
    "limit_hit_dummy_lag1" # 涨跌停指示变量 (需要创建)
]

# --- 7.1 流动性代理变量 (用于 3.4 节分析) ---
# 在 build_features.py 中创建的变量名
LIQUIDITY_PROXY_VAR = "turnover_rate_lag1" # 使用滞后换手率

# --- 7.2 替代波动率度量 (用于 4.1 节稳健性检验) ---
ALT_VOLATILITY_VAR = "log_parkinson_volatility_lag1" # 使用滞后对数Parkinson波动率

# --- 8. 保证金率定义 ---
# 指定使用哪种保证金率: 'average', 'long', 'short'
# **重要**: 需要在 build_features.py 中根据实际数据列名确认此变量，
# 或者实现计算逻辑 (例如，如果只有多空，则计算平均值)。
# 如果多空不同，是否分开分析? 这里先假设用平均值或有统一字段
MARGIN_RATE_COLUMN = "margin_rate" # 假设原始数据中有此列名，或需要计算得出

# --- 9. 其他 ---
# 绘图风格
PLOT_STYLE = "seaborn-v0_8-darkgrid"